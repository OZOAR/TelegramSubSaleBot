from telegram.ext import ConversationHandler
from telegram import (ReplyKeyboardMarkup,
                      ParseMode, InlineKeyboardMarkup,
                      InlineKeyboardButton)
from telegram import ChatMember
from settings import TG_ADMIN_IDS, TG_SUPER_ADMIN_IDS, NOTIFICATION_CHAT
from glob import glob
from random import choice, randint
from datetime import datetime
from emoji import emojize
from util import (parse_new_sub, get_main_keyboard, decode_table_name,
                  check_qiwi_payment, create_token, get_service_price,
                  form_sub_text, send_email, form_user_text)
from pprint import pprint

from sqlitedb_manager import *

from telegram_bot_pagination import InlineKeyboardPaginator


def start(bot, update):
    conn = create_connection()
    add_user(conn, bot.message.chat.id, bot.message.chat.first_name,
             bot.message.chat.last_name, bot.message.chat.username)
    random_num = randint(85,99)
    smile = emojize('ü•≥', use_aliases=True)
    last_name = bot.message.chat.last_name
    if bot.message.chat.id == -428898056:
        bot.message.reply_text('–∞–≥–∞ –∞–≥–∞, —á–∞—Ç–∏–∫ –¥–ª—è —Ç—Ä–∞–∫–Ω–∑–∞–∫—Ü–∏–π –∑–Ω–∞—á–∏—Ç!')
        return True
    if not bot.message.chat.last_name:
        last_name = ''
    gif_list = glob('gifs/timer_10_min.mp4')
    gif = choice(gif_list)
    print(gif_list)
    update.bot.send_animation(
        chat_id=bot.message.chat.id,
        caption=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, <b>{bot.message.chat.first_name}</b> <b>{last_name}</b>! {smile}\n\n'
                f'–°–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥—É —Ç–µ–±–µ –ø—Ä–∏–Ω–µ—Å–ª–æ —á–∏—Å–ª–æ <b>{random_num}</b>, —Å–∫–æ—Ä–µ–µ —Ö–≤–∞—Ç–∞–π —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É!\n\n'
                f'–¢–≤–æ–µ –º–µ—Å—Ç–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –≤ —Ç–µ—á–µ–Ω–∏–∏ ‚ùóÔ∏è<b>10 –º–∏–Ω—É—Ç</b>‚ùóÔ∏è, –µ—Å–ª–∏ —Ç—ã –Ω–µ '
                f'–≤–æ—Å–ø–æ–ª—å–∑—É–µ—à—å—Å—è —Å–≤–æ–µ–π —Å–∫–∏–¥–∫–æ–π!\n\n–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!',
        animation=open(gif, 'rb'),
        parse_mode=ParseMode.HTML,
        width=200,
        height=200,
        reply_markup=get_main_keyboard()
    )


def show_command_list(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n' \
               '/show - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n' \
               '/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑—É\n' \
               '/del - —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±–∞–∑—ã\n' \
               '/send - —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º'
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML)
    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)


def force_subscribe(bot, update):

    look = emojize('üëá', use_aliases=True)
    inl_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text=f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url='')],
        [InlineKeyboardButton(text=f"–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data='subscribe_complete')]
    ])
    bot.message.reply_text(
        f'{look} –≠—Ç–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–∫–∞ —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –Ω–µ —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ :)\n\n',
        parse_mode=ParseMode.HTML, reply_markup=inl_keyboard
    )

def parrot(bot, update):
    update.bot.send_message(bot.message.chat.id, text=bot.message.text,
                            parse_mode=ParseMode.HTML, disable_web_page_preview=True)


def send_pricing(bot, update):
    update.bot.send_message(bot.message.chat.id,
                            text=f'<b>@CinemaSubs_bot</b> - –ø—Ä–æ–µ–∫—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –ø—Ä–æ —Ä–∞–∑—É–º–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ - –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã —Å –Ω–∞—à–∏–º–∏ –ª—é–±–∏–º—ã–º–∏ —Ñ–∏–ª—å–º–∞–º–∏ –∏ —Å–µ—Ä–∏–∞–ª–∞–º–∏.'
                                 f'\n–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑—É—á–∏–ª–∞ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –Ω–∞—à–ª–∞ —Å–ø–æ—Å–æ–± –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫, —á—Ç–æ –≤ —Å–≤–æ—é —Å—Ç–æ—Ä–æ–Ω—É —Å–µ—Ä—å–µ–∑–Ω–æ —É–º–µ–Ω—å—à–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n'
                                 f'–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ: ‚ùóÔ∏è<b>–ù–ï –ú–ï–ù–Ø–¢–¨ –ü–ê–†–û–õ–¨</b>‚ùóÔ∏è\n–ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä–æ–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É <b>–∞–Ω–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è</b> –∏ –í–∞–º –±—É–¥–µ—Ç –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏!\n\n'
                                 f'–í —á–µ—Å—Ç—å –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º <b>–†–ê–°–ü–†–û–î–ê–ñ–£</b>—Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –¥–æ <b>70%</b> –¥–ª—è –ø–µ—Ä–≤—ã—Ö <b>100</b> —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–æ–≤!!!\n\n'
                                 f'–ü—É—Å—Ç—å –ù–æ–≤—ã–π 2021 —Ä–∞–¥—É–µ—Ç –í–∞—Å –ø—Ä–∏—è—Ç–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –∞ –º—ã –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ! üòâ\n\n'
                                 f'1. <b>Netflix Standart</b> <i>(–¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, <b>–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>)</i>\n'
                                 f'–ù–∞—à–∞ —Ü–µ–Ω–∞: <b>249‚ÇΩ</b>\n'
                                 f'–¶–µ–Ω–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ: <b>599‚ÇΩ</b>\n\n'
                                 f'2. <b>Netflix Premium HD 4K</b> <i>(–¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —Å–µ–º–µ–π–Ω—ã–π –¥–æ—Å—Ç—É–ø, <b>–≤—Å–µ –Ω–æ–≤–∏–Ω–∫–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π</b>, –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)</i>\n'
                                 f'–ù–∞—à–∞ —Ü–µ–Ω–∞: <b>390‚ÇΩ</b>\n'
                                 f'–¶–µ–Ω–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ: <b>999‚ÇΩ</b>\n\n'
                                 f'3. <b>Disney Plus</b> <i>(–ø–æ–¥–ø–∏—Å–∞ –Ω–∞ <b>2</b> –≥–æ–¥–∞)</i>\n'
                                 f'–ù–∞—à–∞ —Ü–µ–Ω–∞: <b>990‚ÇΩ</b>\n'
                                 f'–¶–µ–Ω–∞ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º —Å–∞–π—Ç–µ: <b>5718‚ÇΩ/–≥–æ–¥</b>\n\n',
                            parse_mode=ParseMode.HTML, disable_web_page_preview=True, reply_markup=get_main_keyboard())


def show_profile(bot, update):
    conn = create_connection()
    user = get_user(conn, bot.message.chat.id)
    text = '<b>–ò–º—è:</b> {}\n<b>–ë–∞–ª–∞–Ω—Å:</b> {} —Ä—É–±\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {}\n----------------------------'\
        .format(user[2], user[5], user[4])
    update.bot.send_message(bot.message.chat.id, text=text,
                            parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    subs = get_user_subs(conn, bot.message.chat.id)
    print('subs: ',subs)
    if subs:
        update.bot.send_message(bot.message.chat.id, text='''
        <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>
        ''', parse_mode=ParseMode.HTML)
        for sub in subs:
            text = "<b>–°–µ—Ä–≤–∏—Å:</b> {sub_name}\n<b>–õ–æ–≥–∏–Ω:</b> {login}\n" \
                   "<b>–ü–∞—Ä–æ–ª—å:</b> {password}\n".format(**sub)  # "<b>–î–∞—Ç–∞:</b> {date}"
            update.bot.send_message(bot.message.chat.id, text=text,
                                    parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    else:
        update.bot.send_message(bot.message.chat.id, text='<b>–ö—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç!</b>', parse_mode=ParseMode.HTML)


def contact_support(bot, update):
    inl_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏", url='https://t.me/joinchat/TpqbVRC8lt9_0Gcj')],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://t.me/netflix_boss')],
    ])
    update.bot.send_message(bot.message.chat.id,
                            text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –æ—Ç–¥–µ–ª",
                            reply_markup=inl_keyboard,
                            parse_mode=ParseMode.HTML
                            # disable_web_page_preview=True
                            )


def add_sub_start(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '–£–≤–∞–∂–∞–µ–º—ã–π <b>{}</b>, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ " \n\n' \
               '<i>–ü—Ä–∏–º–µ—Ä:</i> "newlogin newpass 1" \n\n' \
               '–ì–¥–µ: \n' \
               '<b>1</b> = <b>Netflix</b>\n' \
               '<b>2</b> = <b>Netflix HD</b>\n' \
               '<b>3</b> = <b>Disney</b>'.format(bot.message.chat.first_name)
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML)
        return "service_id"

    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def add_sub(bot, update):
    conn = create_connection()
    table_id = update.user_data['service_id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    sub_list = parse_new_sub(table_id)
    print(sub_list)
    if not sub_list:
        update.bot.send_message(bot.message.chat.id, text="–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏",
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    result = add_service_sub(conn, login=sub_list[0], password=sub_list[1], table_id=sub_list[2])
    print(result)
    if result:
        update.bot.send_message(bot.message.chat.id, text="–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                                parse_mode=ParseMode.HTML)
    else:
        update.bot.send_message(bot.message.chat.id, text="–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏",
                                parse_mode=ParseMode.HTML)
    return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def show_subs_start(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '–£–≤–∞–∂–∞–µ–º—ã–π <b>{}</b>, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ \n\n' \
               '–ù–æ–º–µ—Ä–∞: \n' \
               '<b>1</b> = <b>Netflix</b>\n' \
               '<b>2</b> = <b>Netflix HD</b>\n' \
               '<b>3</b> = <b>Disney</b>'.format(bot.message.chat.first_name)
        reply_keyboard = [["1", "2", "3"]]  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML,
                                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,
                                                                 one_time_keyboard=True))
        return "service_id"
    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def show_subs(bot, update):
    table_id = update.user_data['id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if table_id not in ['1', '2', '3']:
        update.bot.send_message(bot.message.chat.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä',
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    free_sub_count = 0
    conn = create_connection()
    sub_list = select_subs(conn, table_id)
    decoded_table_name = decode_table_name(table_id)
    if not sub_list:
        update.bot.send_message(bot.message.chat.id, text=f"–ê –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ <b>{decoded_table_name}</b>",
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    update.bot.send_message(bot.message.chat.id,
                            text=f'<b>–ü–æ–¥–ø–∏—Å–∫–∏ {decoded_table_name}</b>\n\n',
                            parse_mode=ParseMode.HTML)
    for sub in sub_list:

        if sub[4] == 0:
            free_sub_count += 1
    formed_list = form_sub_text(sub_list, 5)
    sub = formed_list[0]
    paginator = InlineKeyboardPaginator(
        len(formed_list),
        data_pattern='character#{page}#'+str(table_id)
    )
    update.bot.send_message(chat_id=bot.message.chat.id,
                            text=sub,
                            reply_markup=paginator.markup,
                            parse_mode=ParseMode.HTML)
    update.bot.send_message(bot.message.chat.id, text=f'<b>–í—Å–µ–≥–æ</b>: {len(sub_list)}\n<b>–ù–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö</b>: {free_sub_count}',
                            parse_mode=ParseMode.HTML)
    return ConversationHandler.END


def dont_know(bot, update):
    bot.message.reply_text("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é!")


def delete_sub_start(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '–£–≤–∞–∂–∞–µ–º—ã–π <b>{}</b>, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏\n\n' \
               '–ù–æ–º–µ—Ä–∞: \n' \
               '<b>1</b> = <b>Netflix</b>\n' \
               '<b>2</b> = <b>Netflix HD</b>\n' \
               '<b>3</b> = <b>Disney</b>'.format(bot.message.chat.first_name)
        reply_keyboard = [["1", "2", "3"]]  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML,
                                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True))
        return "service_id"
    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def delete_sub_get_params(bot, update):
    update.user_data['id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if update.user_data['id'] not in ['1', '2', '3']:
        update.bot.send_message(bot.message.chat.id, text='<b>–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—ã–±–æ—Ä</b>', parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    update.bot.send_message(bot.message.chat.id, text='–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä <b>ID</b> –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
                            parse_mode=ParseMode.HTML)

    return "service_row"  # –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞


def delete_sub(bot, update):
    update.user_data['row'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    conn = create_connection()
    print(bot.message.text)
    result = delete_db_sub(conn, update.user_data['id'], update.user_data['row'])
    print(result)
    if result:
        update.bot.send_message(bot.message.chat.id, text='–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ',
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    else:
        update.bot.send_message(bot.message.chat.id, text='–£–¥–∞–ª–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å\n'
                                                          '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ—Ç',
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END

#
# def change_system_params_start(bot, update):
#     if bot.message.chat.id in TG_SUPER_ADMIN_IDS:
#         text = '–£–≤–∞–∂–∞–µ–º—ã–π <b>{}</b>, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å\n\n' \
#                '–ù–æ–º–µ—Ä–∞: \n' \
#                '<b>1</b> = <b>Qiwi –∞–∫–∞—É–Ω—Ç</b>\n' \
#                '<b>2</b> = <b>Qiwi API —Ç–æ–∫–µ–Ω</b>'.format(bot.message.chat.first_name)
#         reply_keyboard = [["1", "2"]]  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         update.bot.send_message(bot.message.chat.id, text=text,
#                                 parse_mode=ParseMode.HTML,
#                                 reply_markup=ReplyKeyboardMarkup(reply_keyboard,
#                                                                  resize_keyboard=True,
#                                                                  one_time_keyboard=True))
#         return "param_id"
#     else:
#         update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
#                                 .format(bot.message.chat.first_name),
#                                 parse_mode=ParseMode.HTML)
#         return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞
#
#
# def change_system_params_get_params(bot, update):
#     update.user_data['id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
#     if update.user_data['id'] not in ['1', '2', '3']:
#         update.bot.send_message(bot.message.chat.id, text='<b>–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—ã–±–æ—Ä</b>', parse_mode=ParseMode.HTML)
#         return ConversationHandler.END
#     update.bot.send_message(bot.message.chat.id, text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:',
#                             parse_mode=ParseMode.HTML)
#     return "param_data"  # –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
#
#
# def change_system_params(bot, update):
#     update.user_data['value'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
#     conn = create_connection()
#     print(update.user_data['value'])
#     print(update.user_data['id'])
#     result = update_qiwi_params(conn, update.user_data['id'], update.user_data['value'])
#     if result:
#         update.bot.send_message(bot.message.chat.id, text='–ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
#                                 parse_mode=ParseMode.HTML)
#         return ConversationHandler.END
#     else:
#         update.bot.send_message(bot.message.chat.id, text='–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –§–∞—Ö–µ–ª—é',
#                                 parse_mode=ParseMode.HTML)
#         return ConversationHandler.END


def forward_post_start(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '–ü—Ä–∏—Å—ã–ª–∞–π –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π <b>—Ä–∞–∑–æ—à–ª–µ–º</b> –∫–ª–∏–µ–Ω—Ç–∞–º:\n\n'
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML)
        return "service_id"
    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def forward_post(bot, update):
    conn = create_connection()
    text = update.user_data['service_id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    users = get_all_users(conn)

    if not users:
        update.bot.send_message(bot.message.chat.id, text="–ê —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Ç–æ –Ω–µ—Ç –∫–æ–º—É",
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    inl_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text=f"–í—Å–µ –Ω–æ–≤–∏–Ω–∫–∏ —Ç—É—Ç", url='t.me/Artprolead')]
    ])
    for user_id in users:
        update.bot.send_message(user_id[1], text=text,
                                parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    return ConversationHandler.END
    #     update.bot.send_message(bot.message.chat.id, text="–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
    #                             parse_mode=ParseMode.HTML)
    # else:
    #     update.bot.send_message(bot.message.chat.id, text="–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏",
    #                             parse_mode=ParseMode.HTML)
    # return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def sell_sub_start(bot, update):
    image_list = glob('images/netflix_disney.jpg')
    # picture = choice(image_list)
    inl_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"Netflix  ‚Ä¢  {get_service_price('1')}‚ÇΩ", callback_data='1')],
        [InlineKeyboardButton(f"Netflix HD 4K  ‚Ä¢  {get_service_price('2')}‚ÇΩ", callback_data='2')],
        [InlineKeyboardButton(f"Disney+  ‚Ä¢  {get_service_price('3')}‚ÇΩ", callback_data='3')]
    ])
    update.bot.send_photo(
        chat_id=bot.message.chat.id,
        photo=open(image_list[0], 'rb'),
        caption="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.\n"
                "–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç "
                "—É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
                "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫, –∞ —Ç–∞–∫–∂–µ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ  üíº <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                "‚ùóÔ∏è<b>–†–û–ñ–î–ï–°–¢–í–ï–ù–°–ö–ê–Ø –†–ê–°–ü–†–û–î–ê–ñ–ê</b>‚ùóÔ∏è\n\n<b>–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!</b>\n"
                "–ù–∞—à–∏ —Ü–µ–Ω—ã —Å–Ω–∏–∂–µ–Ω—ã –±–æ–ª–µ–µ —á–µ–º –Ω–∞ <b>30%</b>\n\n"
                "<b>Netflix</b>\n"
                f"–ê—Ü–∏—è: <s>249‚ÇΩ</s> <b>{get_service_price('1')}‚ÇΩ</b>\n\n"
                "<b>Netflix HD 4K</b>\n"
                f"–ê—Ü–∏—è: <s>390‚ÇΩ</s> <b>{get_service_price('2')}‚ÇΩ</b>\n\n"
                "<b>Disney+</b>\n"
                f"–ê—Ü–∏—è: <s>990‚ÇΩ</s> <b>{get_service_price('3')}‚ÇΩ</b>\n\n",
        reply_markup=inl_keyboard, parse_mode=ParseMode.HTML
    )


def credit_balance(bot, update) -> None:
    conn = create_connection()
    user = get_user(conn, bot.message.chat.id)
    present_toke = user[6]
    pending = emojize('‚åõ', use_aliases=True)
    search = emojize('üîé', use_aliases=True)
    cancel = emojize('üß®', use_aliases=True)
    if present_toke != 0:
        inl_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(text=f"–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω {cancel}", callback_data='68')],
            [InlineKeyboardButton(text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É {search}", callback_data='69')]
        ])
        bot.message.reply_text(
            f'–£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è <b>—Ç–æ–∫–µ–Ω</b>: <b><code>{present_toke}</code></b> –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞.\n\n'
            f'–ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π –ª–∏–±–æ –ø—Ä–∏—á–∏–Ω–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º <b>–Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω</b> –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '
            f'<b>–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω {cancel}</b>\n\n'
            f'–£—á—Ç–∏—Ç–µ, –µ—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>–Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω</b>, –≤—Å–µ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã–µ Qiwi –ø–µ—Ä–µ–≤–æ–¥—ã '
            f'—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤–∞—à –Ω—ã–Ω–µ—à–Ω–∏–π —Ç–æ–∫–µ–Ω <code>{present_toke}</code> –∑–∞—á–∏—Å–ª–µ–Ω—ã <b>–Ω–µ –±—É–¥—É—Ç</b>.',
            parse_mode=ParseMode.HTML, reply_markup=inl_keyboard
            )
    else:
        token = create_token()
        inl_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É {search}", callback_data='69')]
        ])
        qiwi_params = get_qiwi_params(conn)
        print(qiwi_params)
        bot.message.reply_text(f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞</b>\n\n<b>–î–∞—Ç–∞</b>: "
                               f"{datetime.now().replace(second=0, microsecond=0)}\n"
                               f"<b>–°—Ç–∞—Ç—É—Å</b>: –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {pending}\n\n"
                               f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π —Å—á–µ—Ç –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –ø–æ –Ω–æ–º–µ—Ä—É <b>QIWI</b>:\n"
                               f"<code>{qiwi_params[1]}</code>\n"
                               f"–ò–ª–∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É <b>VISA</b>:\n"
                               f"<code>{qiwi_params[3]}</code>\n"
                               f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <code>{qiwi_params[4]}</code>\n\n"
                               f"<b>–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b> –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ:\n"
                               f"<code>{token}</code>", parse_mode=ParseMode.HTML)
        bot.message.reply_text('–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ <b>QIWI</b> –∫–æ—à–µ–ª–µ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É</b>', reply_markup=inl_keyboard,
                               parse_mode=ParseMode.HTML)
        update_user_token(conn, bot.message.chat.id, token)


def inline_button_pressed(bot, update):
    query = bot.callback_query
    query.answer()
    query_data = query.data
    user_tg_id = query.message.chat.id
    conn = create_connection()
    if query_data in ['1', '2', '3']:
        table_id = query_data
        sub_price = get_service_price(table_id)
        sub = get_free_sub(conn, table_id)
        print(f'BUY SUB \ntable_id: {table_id}\nuser_tg_id: {user_tg_id}\nsub_price: {sub_price}\nSub: {sub}\n')
        if sub:
            result = pay_for_sub(conn, user_tg_id, sub_price)
            # print(result, ' - user')
            if result:
                give_sub_to_user(conn, table_id, sub, user_tg_id)
                user = get_user(conn, user_tg_id)
                print(user)
                log_sale_transaction(conn, user_tg_id, user[2], user[3], user[7], table_id)
                text = f'<i><b>–õ–æ–≥–∏–Ω</b></i>: {sub[1]}\n<i><b>–ü–∞—Å—Å</b></i>: {sub[2]}\n' \
                       f'<i><b>–î–∞—Ç–∞ –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏—è</b></i>: {sub[3]}\n\n'
                email_subject = 'Purchase made !'
                email_body = f'User: {user[2]} / @{user[7]}\n\nPurchased a subscription *{decode_table_name(table_id)}* #{sub[0]}'
                send_email(email_subject, email_body)
                update.bot.edit_message_caption(
                    caption=text,
                    chat_id=query.message.chat.id,
                    message_id=query.message.message_id, parse_mode=ParseMode.HTML)
            else:
                update.bot.edit_message_caption(
                    caption='–ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –≤–∞—à–µ–º <b>–ø—Ä–æ—Ñ–∏–ª–µ</b>',
                    chat_id=query.message.chat.id,
                    message_id=query.message.message_id, parse_mode=ParseMode.HTML)
        else:
            inl_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://t.me/netflix_boss')]
            ])
            update.bot.edit_message_caption(
                chat_id=query.message.chat.id,
                caption="–£–ø—Å, –ø–æ—Ö–æ–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, "
                        "–æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Ç–∞–º –ø–æ–¥—Å–∫–∞–∂—É—Ç –∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä—Ç–∏—è ",
                reply_markup=inl_keyboard,
                message_id=query.message.message_id, parse_mode=ParseMode.HTML
            )
    # —Å–±—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞
    if query_data == '68':
        user_tg_id = query.message.chat.id
        update_user_token(conn, user_tg_id, 0)
        query.edit_message_text(
            text='<b>–ü–æ–ø–æ–ª–µ–Ω–∏–Ω–µ —Å—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n'
                 '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –≤—ã–±–∏—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é - üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç',
            parse_mode=ParseMode.HTML
        )
    # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    if query_data == '69':
        user = get_user(conn, user_tg_id)
        user_last_token = user[6]
        user_balance = user[5]
        print(f'user {user_tg_id} checking payment.\nuser info: {user}\n')
        result = check_qiwi_payment(user_last_token)
        # print('payment result',result)
        # result = 10
        print(f'result is: {result}')
        done_smile = emojize('‚úîÔ∏è', use_aliases=True)
        if result:
            new_user_balance = user_balance + result
            print(f'new balance: {new_user_balance}')
            query.edit_message_text(
                text=f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞</b>\n\n<b>–î–∞—Ç–∞</b>:{datetime.now().replace(second=0, microsecond=0)}\n"
                     f"<b>–ó–∞—á–∏—Å–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞</b>: {result} <b>‚ÇΩ</b>\n\n"
                     f"<b>–°—Ç–∞—Ç—É—Å</b>: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {done_smile}\n\n",
                parse_mode=ParseMode.HTML)
            credit_user_account(conn, user_tg_id, new_user_balance, user_last_token)
            update_user_token(conn, user_tg_id, 0)
            log_credit_transaction(conn, user_tg_id, user[2], user[3], user[7], result)
            email_subject = 'Balance replenishment'
            email_body = f'User: {user[2]} / @{user[7]}\n\nReplenished the balance on *{result}* rub'
            send_email(email_subject, email_body)
        else:
            search = emojize('üîé', use_aliases=True)
            inl_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É {search}", callback_data='69')]])
            query.edit_message_text("<b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω</b>\n\n"
                                    "–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª–µ–µ <b>10 –º–∏–Ω—É—Ç</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,\n"
                                    "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–π <a href='t.me/Artprolead'>—Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</a>",
                                    reply_markup=inl_keyboard,
                                    disable_web_page_preview=True,
                                    parse_mode=ParseMode.HTML)

    if 'character#' in query.data:
        page = int(query.data.split('#')[1])
        table_id = query.data.split('#')[2]
        sub_list = select_subs(conn, table_id)
        formed_list = form_sub_text(sub_list, 5)
        paginator = InlineKeyboardPaginator(
            len(formed_list),
            current_page=page,
            data_pattern='character#{page}#'+str(table_id))
        sub = formed_list[page - 1]
        query.edit_message_text(
            text=sub,
            reply_markup=paginator.markup,
            parse_mode=ParseMode.HTML)

    if 'daily_users#' in query.data:
        page = int(query.data.split('#')[1])
        today_date = date.today().strftime("%d/%m/%Y")
        user_list = get_user_by_date(conn, today_date)
        result = form_user_text(user_list, 10)
        formed_list = result[0]

        paginator = InlineKeyboardPaginator(
            len(formed_list),
            current_page=page,
            data_pattern='daily_users#{page}')
        users = formed_list[page - 1]
        query.edit_message_text(
            text=users,
            reply_markup=paginator.markup,
            parse_mode=ParseMode.HTML)


def show_daily_stats(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        conn = create_connection()
        today_date = date.today().strftime("%d/%m/%Y")
        credit_list = get_credit_transaction_by_date(conn, today_date)
        sale_list = get_sale_log_by_date(conn, today_date)
        user_list = get_user_by_date(conn, today_date)
        text = ''
        total_sum = 0

        if credit_list:
            print('credits: ', credit_list)
            for i in range(len(credit_list)):
                text += f'<b>#</b>{i+1}\n<b>tg_id</b>: {credit_list[i][1]}\n' \
                        f'<b>–ò–º—è</b>: {credit_list[i][2]} {credit_list[i][3]}\n<b>username</b>: {credit_list[i][4]}\n' \
                        f'<b>–°—É–º–º–∞</b>: {credit_list[i][6]}\n\n'
                total_sum += credit_list[i][6]
        update.bot.send_message(bot.message.chat.id, text=f'<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞</b> {today_date}\n\n'+text+
                                                          f'\n\n<b>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>: {total_sum}',
                                parse_mode=ParseMode.HTML)
        text = ''
        if sale_list:
            for i in range(len(sale_list)):
                text += f'<b>#</b>{i+1}\n<b>tg_id</b>: {sale_list[i][1]}\n' \
                        f'<b>–ò–º—è</b>: {sale_list[i][2]} {sale_list[i][3]}\n<b>username</b>: {sale_list[i][4]}\n' \
                        f'<b>–°–µ—Ä–≤–∏—Å</b>: {decode_table_name(sale_list[i][6])}\n\n'
        update.bot.send_message(bot.message.chat.id, text=f'<b>–ü—Ä–æ–¥–∞–∂–∏ –∑–∞</b> {today_date}\n\n'+text+
                                                          f'\n\n<b>–ü—Ä–æ–¥–∞–Ω–æ –ø–æ–ø–∏—Å–æ–∫</b>: {len(sale_list)}',
                                parse_mode=ParseMode.HTML)
        update.bot.send_message(bot.message.chat.id, text=f'<b>–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞</b> {today_date}\n\n'
                                                          f'–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å @username',
                                parse_mode=ParseMode.HTML)
        if user_list:
            result = form_user_text(user_list, 10)
            formed_list = result[0]
            users = formed_list[0]
            paginator = InlineKeyboardPaginator(
                len(formed_list),
                data_pattern='daily_users#{page}'
            )
            update.bot.send_message(chat_id=bot.message.chat.id,
                                    text=users,
                                    reply_markup=paginator.markup,
                                    parse_mode=ParseMode.HTML)
            update.bot.send_message(bot.message.chat.id,
                                    text=f'<b>–ò—Ç–æ–≥–æ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</b>: {len(user_list)}\n',
                                    parse_mode=ParseMode.HTML)
            # for i in range(len(user_list)):
            #     if user_list[i][6] or user_list[i][7]:
            #         update.bot.send_message(bot.message.chat.id,
            #                                 text=f'<b>#</b>{i + 1}\n<b>tg_id</b>: {user_list[i][1]}\n'
            #                                      f'<b>–ò–º—è</b>: {user_list[i][2]} {user_list[i][3]}\n'
            #                                      f'<b>username</b>: {user_list[i][7]}\n\n',
            #                                 parse_mode=ParseMode.HTML)

        update.bot.send_message(bot.message.chat.id, text=f'\n\n<b>–ü—Ä–æ–±–æ–≤–∞–ª–∏ –∫—É–ø–∏—Ç—å</b>: {result[1]}',
                                parse_mode=ParseMode.HTML)

    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
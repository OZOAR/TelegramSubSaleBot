from telegram.ext import ConversationHandler
from telegram import (ReplyKeyboardMarkup,
                      ParseMode, InlineKeyboardMarkup,
                      InlineKeyboardButton)
from settings import TG_ADMIN_IDS, TG_SUPER_ADMIN_IDS
from glob import glob
from random import choice, randrange
from datetime import datetime
from emoji import emojize
from util import (parse_new_sub, get_keyboard, decode_table_name,
                  check_qiwi_payment, create_token, get_sub_price)

from sqlitedb_manager import (create_connection,
                              db_add_sub, db_select_subs, db_delete_sub, db_add_user,
                              get_user_subs, get_user, get_stock_sub, pay_for_sub,
                              give_sub, update_user_token, credit_user_account,
                              update_qiwi_params, get_qiwi_data, select_all_users)

from telegram_bot_pagination import InlineKeyboardPaginator


def start(bot, update):
    conn = create_connection()
    db_add_user(conn, bot.message.chat.id, bot.message.chat.first_name, bot.message.chat.last_name)
    random_num = randrange(100)
    smile = emojize('ü•≥', use_aliases=True)
    last_name = bot.message.chat.last_name
    if not bot.message.chat.last_name:
        last_name = ''
    bot.message.reply_text(f'''–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, *{bot.message.chat.first_name}* *{last_name}*! {smile}
–°–µ–≥–æ–¥–Ω—è –ø–æ–±–µ–¥—É —Ç–µ–±–µ –ø—Ä–∏–Ω–µ—Å–ª–æ —á–∏—Å–ª–æ *{random_num}*, —Å–∫–æ—Ä–µ–µ —Ö–≤–∞—Ç–∞–π —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É!

–¢–≤–æ–µ –º–µ—Å—Ç–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥—Ä—É–≥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –≤ —Ç–µ—á–µ–Ω–∏–∏ *10 –º–∏–Ω—É—Ç*, –µ—Å–ª–∏ —Ç—ã –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑—É–µ—à—å—Å—è —Å–≤–æ–µ–π —Å–∫–∏–¥–∫–æ–π!

–ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!''', parse_mode='Markdown', reply_markup=get_keyboard())


def show_command_list(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n' \
               '/show - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n' \
               '/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑—É\n' \
               '/del - —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±–∞–∑—ã\n' \
               '/params - –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (–¥–æ—Å—Ç—É–ø–Ω–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º)'
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML)
    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)


def parrot(bot, update):
    update.bot.send_message(bot.message.chat.id, text=bot.message.text,
                            parse_mode=ParseMode.HTML, disable_web_page_preview=True)


def send_pricing(bot, update):
    update.bot.send_message(bot.message.chat.id, text='—Ç–∏–ø–∞ –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —á—Ç–æ –¥–∞ –∫–∞–∫, –∏ —Ü–µ–Ω—ã –∏ –≥–∞—Ä–∞–Ω—Ç–∏—è',
                            parse_mode=ParseMode.HTML, disable_web_page_preview=True)


def show_profile(bot, update):
    conn = create_connection()
    user = get_user(conn, bot.message.chat.id)
    text = '<b>–ò–º—è:</b> {}\n<b>–ë–∞–ª–∞–Ω—Å:</b> {} —Ä—É–±\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {}\n----------------------------'\
        .format(user[2], user[5], user[4])
    update.bot.send_message(bot.message.chat.id, text=text,
                            parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    subs = get_user_subs(conn, bot.message.chat.id)
    # subs= [{'sub_name': user[0], 'login': user[1], 'password': user[2], 'date':user[3]}]
    if subs:
        update.bot.send_message(bot.message.chat.id, text='''
        <b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:</b>
        ''', parse_mode=ParseMode.HTML)
        for sub in subs:
            text = "<b>–°–µ—Ä–≤–∏—Å:</b> {sub_name}\n<b>–õ–æ–≥–∏–Ω:</b> {login}\n" \
                   "<b>–ü–∞—Ä–æ–ª—å:</b> {password}\n".format(**sub)  # "<b>–î–∞—Ç–∞:</b> {date}"
            update.bot.send_message(bot.message.chat.id, text=text,
                                    parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    else:
        update.bot.send_message(bot.message.chat.id, text='<b>–ö—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç!</b>', parse_mode=ParseMode.HTML)


def contact_support(bot, update):
    inl_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏", url='https://t.me/kinoobum/3728')],
        [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://t.me/@mikhedova')],
        [InlineKeyboardButton(text='–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –æ—Ç–¥–µ–ª', url='https://web.telegram.org/#/im?p=@Artprolead')]
    ])
    update.bot.send_message(bot.message.chat.id,
                            text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –æ—Ç–¥–µ–ª",
                            reply_markup=inl_keyboard,
                            parse_mode=ParseMode.HTML
                            # disable_web_page_preview=True
                            )


def add_new_subs_start(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '–£–≤–∞–∂–∞–µ–º—ã–π <b>{}</b>, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ " \n\n' \
               '<i>–ü—Ä–∏–º–µ—Ä:</i> "newlogin newpass 1" \n\n' \
               '–ì–¥–µ: \n' \
               '<b>1</b> = <b>Netflix</b>\n' \
               '<b>2</b> = <b>Netflix HD</b>\n' \
               '<b>3</b> = <b>Disney</b>'.format(bot.message.chat.first_name)
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML)
        return "service_id"

    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def add_new_subs(bot, update):
    conn = create_connection()
    table_id = update.user_data['service_id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    sub_list = parse_new_sub(table_id)
    if not sub_list:
        update.bot.send_message(bot.message.chat.id, text="–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏",
                                parse_mode=ParseMode.HTML)
        conn.close()
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    result = db_add_sub(conn, login=sub_list[0], password=sub_list[1], table_id=sub_list[2])
    conn.close()
    if result:
        update.bot.send_message(bot.message.chat.id, text="–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                                parse_mode=ParseMode.HTML)
    else:
        update.bot.send_message(bot.message.chat.id, text="–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏",
                                parse_mode=ParseMode.HTML)
    return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def show_subs_start(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '–£–≤–∞–∂–∞–µ–º—ã–π <b>{}</b>, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ \n\n' \
               '–ù–æ–º–µ—Ä–∞: \n' \
               '<b>1</b> = <b>Netflix</b>\n' \
               '<b>2</b> = <b>Netflix HD</b>\n' \
               '<b>3</b> = <b>Disney</b>'.format(bot.message.chat.first_name)
        reply_keyboard = [["1", "2", "3"]]  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML,
                                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True,
                                                                 one_time_keyboard=True))
        print(21)
        return "service_id"
    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def show_subs(bot, update):
    table_id = update.user_data['id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if table_id not in ['1', '2', '3']:
        update.bot.send_message(bot.message.chat.id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä',
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    free_sub_count = 0
    conn = create_connection()
    sub_list = db_select_subs(conn, table_id)
    conn.close()
    text = f'<b>–ü–æ–¥–ø–∏—Å–∫–∏ {decode_table_name(table_id)}</b>\n\n'
    if sub_list:
        print(sub_list)
        for sub in sub_list:
            text += f'<i><b>ID</b></i>: {sub[0]}\n<i><b>–õ–æ–≥–∏–Ω</b></i>: {sub[1]}\n' \
                    f'<i><b>–ü–∞—Å—Å</b></i>: {sub[2]}\n<i><b>–í–ª–∞–¥–µ–ª–µ—Ü</b></i>: {sub[4]}\n' \
                    f'<i><b>–î–∞—Ç–∞</b></i>: {sub[3]}\n\n'
            # update.bot.send_message(bot.message.chat.id, text=buffer, parse_mode=ParseMode.HTML)
            if sub[4] == 0:
                free_sub_count += 1
        update.bot.send_message(bot.message.chat.id, text=text, parse_mode=ParseMode.HTML)
        update.bot.send_message(bot.message.chat.id, text='–ù–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{}</b> '.format(free_sub_count),
                                parse_mode=ParseMode.HTML,
                                reply_markup=get_keyboard())
        return ConversationHandler.END

    else:

        update.bot.send_message(bot.message.chat.id, text=f"–ê –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ {decode_table_name(table_id)}</b>",
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END


def dont_know(bot, update):
    bot.message.reply_text("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é!")


def delete_sub_start(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '–£–≤–∞–∂–∞–µ–º—ã–π <b>{}</b>, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏\n\n' \
               '–ù–æ–º–µ—Ä–∞: \n' \
               '<b>1</b> = <b>Netflix</b>\n' \
               '<b>2</b> = <b>Netflix HD</b>\n' \
               '<b>3</b> = <b>Disney</b>'.format(bot.message.chat.first_name)
        reply_keyboard = [["1", "2", "3"]]  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML,
                                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True))
        return "service_id"
    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def delete_sub_get_service_id(bot, update):
    update.user_data['id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if update.user_data['id'] not in ['1', '2', '3']:
        update.bot.send_message(bot.message.chat.id, text='<b>–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—ã–±–æ—Ä</b>', parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    update.bot.send_message(bot.message.chat.id, text='–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä <b>ID</b> –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å',
                            parse_mode=ParseMode.HTML)

    return "service_row"  # –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞


def delete_sub_get_sub_id(bot, update):
    update.user_data['row'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    conn = create_connection()
    result = db_delete_sub(conn, update.user_data['id'], update.user_data['row'])
    if result:
        update.bot.send_message(bot.message.chat.id, text='–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ',
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    else:
        update.bot.send_message(bot.message.chat.id, text='–£–¥–∞–ª–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å\n'
                                                          '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ç–∞–∫–∏–º <b>ID</b> –Ω–µ—Ç',
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END


def new_params_start(bot, update):
    if bot.message.chat.id in TG_SUPER_ADMIN_IDS:
        text = '–£–≤–∞–∂–∞–µ–º—ã–π <b>{}</b>, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å\n\n' \
               '–ù–æ–º–µ—Ä–∞: \n' \
               '<b>1</b> = <b>Qiwi –∞–∫–∞—É–Ω—Ç</b>\n' \
               '<b>2</b> = <b>Qiwi API —Ç–æ–∫–µ–Ω</b>'.format(bot.message.chat.first_name)
        reply_keyboard = [["1", "2"]]  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML,
                                reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                                 resize_keyboard=True,
                                                                 one_time_keyboard=True))
        return "param_id"
    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def get_new_params_id(bot, update):
    update.user_data['id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if update.user_data['id'] not in ['1', '2', '3']:
        update.bot.send_message(bot.message.chat.id, text='<b>–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—ã–±–æ—Ä</b>', parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    update.bot.send_message(bot.message.chat.id, text='–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:',
                            parse_mode=ParseMode.HTML)
    return "param_data"  # –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞


def get_new_params_data(bot, update):
    update.user_data['value'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    conn = create_connection()
    result = update_qiwi_params(conn, update.user_data['id'], update.user_data['value'])
    if result:
        update.bot.send_message(bot.message.chat.id, text='–ü–∞—Ä–∞–º–µ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END
    else:
        update.bot.send_message(bot.message.chat.id, text='–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –§–∞—Ö–µ–ª—é',
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END


def forward_post_start(bot, update):
    if bot.message.chat.id in TG_ADMIN_IDS:
        text = '–ü—Ä–∏—Å—ã–ª–∞–π –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π <b>—Ä–∞–∑–æ—à–ª–µ–º</b> –∫–ª–∏–µ–Ω—Ç–∞–º:\n\n'
        update.bot.send_message(bot.message.chat.id, text=text,
                                parse_mode=ParseMode.HTML)
        return "service_id"
    else:
        update.bot.send_message(bot.message.chat.id, text='–ò–∑–≤–∏–Ω–∏, {}, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ'
                                .format(bot.message.chat.first_name),
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def forward_post(bot, update):
    conn = create_connection()
    text = update.user_data['service_id'] = bot.message.text  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    users = select_all_users(conn)

    if not users:
        update.bot.send_message(bot.message.chat.id, text="–ê —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Ç–æ –Ω–µ—Ç –∫–æ–º—É",
                                parse_mode=ParseMode.HTML)
        return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    print(1)
    inl_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text=f"–í—Å–µ –Ω–æ–≤–∏–Ω–∫–∏ —Ç—É—Ç", url='t.me/Artprolead')]
    ])
    for user_id in users:
        update.bot.send_message(user_id[1], text=text,
                                parse_mode=ParseMode.HTML, reply_markup=inl_keyboard, disable_web_page_preview=True)
    return ConversationHandler.END
    #     update.bot.send_message(bot.message.chat.id, text="–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞",
    #                             parse_mode=ParseMode.HTML)
    # else:
    #     update.bot.send_message(bot.message.chat.id, text="–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏",
    #                             parse_mode=ParseMode.HTML)
    # return ConversationHandler.END  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞


def buy_subs_start(bot, update):
    image_list = glob('images/*')
    picture = choice(image_list)
    inl_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("Netflix", callback_data='1')],
        [InlineKeyboardButton("Netflix HD", callback_data='2')],
        [InlineKeyboardButton("Disney", callback_data='3')]
    ])
    update.bot.send_photo(
        chat_id=bot.message.chat.id,
        photo=open(picture, 'rb'),
        caption="–í—ã–±–∏—Ä–∞–π –ø–æ–¥–ø–∏—Å–∫—É –µ–ø—Ç.",
        reply_markup=inl_keyboard
    )


def credit_balance(bot, update) -> None:
    conn = create_connection()
    # user = get_user(conn, bot.message.chat.id)
    # if user[6]:
    #     inl_keyboard = InlineKeyboardMarkup([
    #         [InlineKeyboardButton(text=f"–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data='69')]
    #     ])
    #     bot.message.reply_text(
    #         f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞</b>\n\n<b>–î–∞—Ç–∞</b>:{datetime.now().replace(second=0, microsecond=0)}\n"
    #         f"<b>–°—Ç–∞—Ç—É—Å</b>: –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ {smile}\n\n"
    #         f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π —Å—á–µ—Ç –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –ø–æ –Ω–æ–º–µ—Ä—É <b>QIWI</b>: {get_qiwi_data(conn)[1]}\n"
    #         f"<b>–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ</b>: {token}\n\n",
    #         # f"<b>–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞!</b>\n–ü–æ—Å–ª–µ QIWI –ø–µ—Ä–µ–≤–æ–¥–∞  ",
    #         # reply_markup=inl_keyboard,
    #         parse_mode=ParseMode.HTML
    #         )
    token = create_token()
    smile = emojize('‚åõ', use_aliases=True)
    search = emojize('üîé', use_aliases=True)
    print('Token = ', token)
    inl_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É {search}", callback_data='69')]
    ])
    bot.message.reply_text(f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞</b>\n\n<b>–î–∞—Ç–∞</b>:{datetime.now().replace(second=0, microsecond=0)}\n"
                           f"<b>–°—Ç–∞—Ç—É—Å</b>: –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞ {smile}\n\n"
                           f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π —Å—á–µ—Ç –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –ø–æ –Ω–æ–º–µ—Ä—É <b>QIWI</b>: {get_qiwi_data(conn)[1]}\n"
                           f"<b>–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ</b>: {token}\n\n", parse_mode=ParseMode.HTML)
    bot.message.reply_text('–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ <b>QIWI</b> –∫–æ—à–µ–ª–µ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É</b>', reply_markup=inl_keyboard,
                           parse_mode=ParseMode.HTML)
    update_user_token(conn, bot.message.chat.id, token)


def inline_button_pressed(bot, update):
    query = bot.callback_query
    query.answer()
    print(query.data)
    if query.data in ['1', '2', '3']:
        table_id = query.data
        user_tg_id = query.message.chat.id
        conn = create_connection()
        sub_price = get_sub_price(table_id)
        sub = get_stock_sub(conn, table_id)
        print(f'BUY SUB \ntable_id: {table_id}\nuser_tg_id: {user_tg_id}\nsub_price: {sub_price}\nSub: {sub}\n')
        if sub:
            user = pay_for_sub(conn, user_tg_id, sub_price)
            print(f'user already buy!: {user}')
            print(user, ' - user')
            if user:
                give_sub(conn, table_id, sub, user_tg_id)
                print(sub[1], sub[2], sub[3])
                text = f'<i><b>–õ–æ–≥–∏–Ω</b></i>: {sub[1]}\n<i><b>–ü–∞—Å—Å</b></i>: {sub[2]}\n' \
                       f'<i><b>–î–∞—Ç–∞ –ø—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–∏—è</b></i>: {sub[3]}\n\n'
                # f'<i><b>–í–ª–∞–¥–µ–ª–µ—Ü</b></i>:<a href=t.me/{user[1]}>{user[1]}\n</a>' \
                update.bot.edit_message_caption(
                    caption=text,
                    chat_id=query.message.chat.id,
                    message_id=query.message.message_id, parse_mode=ParseMode.HTML)

            else:
                update.bot.edit_message_caption(
                    caption='–ù–µ—Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –≤–∞—à–µ–º <b>–ø—Ä–æ—Ñ–∏–ª–µ</b>',
                    chat_id=query.message.chat.id,
                    message_id=query.message.message_id, parse_mode=ParseMode.HTML)
        else:
            inl_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(text="–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://t.me/Artprolead')]
            ])
            update.bot.edit_message_caption(
                chat_id=query.message.chat.id,
                caption="–£–ø—Å, –ø–æ—Ö–æ–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, "
                        "–æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Ç–∞–º –ø–æ–¥—Å–∫–∞–∂—É—Ç –∫–æ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä—Ç–∏—è ",
                reply_markup=inl_keyboard,
                message_id=query.message.message_id, parse_mode=ParseMode.HTML
            )
    elif query.data == '69':
        conn = create_connection()
        user_tg_id = query.message.chat.id
        user = get_user(conn, user_tg_id)
        user_last_token = user[6]
        user_balance = user[5]
        print(f'user {user_tg_id} checking payment.\nuser info: {user}\n')
        result = check_qiwi_payment(user_last_token)
        print(f'result is: {result}')
        done_smile = emojize('‚úî', use_aliases=True)
        if result:
            new_user_balance = user_balance + result
            print(f'new balance: {new_user_balance}')
            print(result)
            query.edit_message_text(
                text=f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞</b>\n\n<b>–î–∞—Ç–∞</b>:{datetime.now().replace(second=0, microsecond=0)}\n"
                     f"<b>–ó–∞—á–∏—Å–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞</b>: {result} <b>‚ÇΩ</b>\n\n"
                     f"<b>–°—Ç–∞—Ç—É—Å</b>: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {done_smile}\n\n",
                parse_mode=ParseMode.HTML
            )
            credit_user_account(conn, user_tg_id, new_user_balance, user_last_token)
        else:
            search = emojize('üîé', use_aliases=True)
            inl_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(text=f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É {search}", callback_data='69')]
            ])
            query.edit_message_text("<b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω</b>\n\n"
                                    "–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª–µ–µ <b>10 –º–∏–Ω—É—Ç</b>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,\n"
                                    "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ–π <a href='t.me/Artprolead'>—Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</a>",
                                    reply_markup=inl_keyboard,
                                    disable_web_page_preview=True,
                                    parse_mode=ParseMode.HTML
                                    )

    elif 'character#' in query.data:
        pass

